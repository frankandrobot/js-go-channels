{"version":3,"sources":["../../src/utils.js"],"names":["uuid","checkGenerator","BufferItem","data","next","LinkedListBuffer","head","undefined","tail","item","bufferItem","id","generator","Error","iterator","Symbol"],"mappings":";;;;;;;;;;;;;;;QAqCiBA,I,GAAAA,I;QAODC,c,GAAAA,c;;;;IA5CHC,U,WAAAA,U,GACX,oBAAYC,IAAZ,EAAkBC,IAAlB,EAAwB;AAAA;;AACtB,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACD,C;;IAGUC,gB,WAAAA,gB;AACX,8BAAc;AAAA;;AACZ,SAAKC,IAAL,GAAYC,SAAZ;AACA,SAAKC,IAAL,GAAYD,SAAZ;AACD;;;;wBAEGE,I,EAAM;AACR,UAAMC,aAAa,IAAIR,UAAJ,CAAeO,IAAf,CAAnB;;AAEA,UAAI,CAAC,KAAKH,IAAV,EAAgB;AACd,aAAKA,IAAL,GAAYI,UAAZ;AACA,aAAKF,IAAL,GAAYE,UAAZ;AACA;AACD;AACD,WAAKF,IAAL,CAAUJ,IAAV,GAAiBM,UAAjB;AACD;;;0BAEK;AACJ,UAAG,CAAC,KAAKJ,IAAT,EAAe;AACb,eAAOC,SAAP;AACD;AACD,UAAME,OAAO,KAAKH,IAAlB;AACA,WAAKA,IAAL,GAAY,KAAKA,IAAL,CAAUF,IAAtB;AACA,aAAOK,KAAKN,IAAZ;AACD;;;;;AAIH,IAAIQ,KAAK,CAAT;;AAEO,SAAUX,IAAV,GAAiB;AAGtB,SAAOW,IAAP;AACD;;AAGM,SAASV,cAAT,CAAwBW,SAAxB,EAAmC;AAExC,MAAI,CAACA,SAAD,IAAc,OAAOA,SAAP,KAAqB,UAAvC,EAAoD;AAClD,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;AACD,MAAMC,WAAWF,WAAjB;AACA,MAAI,CAACE,QAAD,IAAa,OAAOA,SAASC,OAAOD,QAAhB,CAAP,KAAqC,UAAtD,EAAmE;AACjE,UAAM,IAAID,KAAJ,CAAU,kBAAV,CAAN;AACD;AACD,SAAOC,QAAP;AACD","file":"utils.js","sourcesContent":["export class BufferItem {\n  constructor(data, next) {\n    this.data = data\n    this.next = next\n  }\n}\n\nexport class LinkedListBuffer {\n  constructor() {\n    this.head = undefined\n    this.tail = undefined\n  }\n\n  add(item) {\n    const bufferItem = new BufferItem(item)\n    // first item ever\n    if (!this.head) {\n      this.head = bufferItem\n      this.tail = bufferItem\n      return\n    }\n    this.tail.next = bufferItem\n  }\n\n  pop() {\n    if(!this.head) {\n      return undefined\n    }\n    const item = this.head\n    this.head = this.head.next\n    return item.data\n  }\n}\n\n\nlet id = 0\n\nexport function  uuid() {\n  // Note that we're not using generators to avoid having generators\n  // as a libary dependency.\n  return id++\n}\n\n\nexport function checkGenerator(generator) {\n  // check if generator\n  if (!generator || typeof generator !== 'function' ) {\n    throw new Error('Need a generator');\n  }\n  const iterator = generator()\n  if (!iterator || typeof iterator[Symbol.iterator] !== 'function' ) {\n    throw new Error('Need an iterator');\n  }\n  return iterator\n}\n"]}